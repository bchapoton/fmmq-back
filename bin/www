#!/usr/bin/env node
const fs = require('fs');

if(!fs.existsSync('./logs')) {
    fs.mkdirSync('./logs');
}

/**
 * Module dependencies.
 */

const {logError, logInfo} = require("../logger/Logger");
const app = require('../app');
const debug = require('debug')('quiz:server');
const http = require('http');
const mongoose = require('mongoose');
const {getNodePort, getMongoDBUri, getPrivateKey} = require("../services/SystemService");
const {initServerData} = require("../services/InitService");
const SocketIO = require('socket.io');


if (!getPrivateKey()) {
    logError("FATAL ERROR: private key is not defined.");
    process.exit(1);
}

const mongoDBUri = getMongoDBUri();
if (!mongoDBUri) {
    logError("FATAL ERROR: MongoDb uri is not defined.");
    process.exit(1);
}

// mongodb://localhost:27017/?readPreference=primary&appname=MongoDB%20Compass%20Community&ssl=false
mongoose
    .connect(mongoDBUri,
        {useUnifiedTopology: true, useNewUrlParser: true})
    .then(() => logInfo("Connected to MongoDB..."))
    .catch(err => {
        logError("FATAL ERROR: Could not connect to MongoDB...");
        process.exit(1);
    });

// initialize FMMQ server
initServerData();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(getNodePort());
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Attach socket
 */
const socket = require('../socket/FMMQSocket');
socket.attach(server, {
    transports: ['websocket']
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logError(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logError(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
